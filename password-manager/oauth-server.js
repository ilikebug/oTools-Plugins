(()=>{var e={16928:e=>{"use strict";e.exports=require("path")},45528:(e,n,t)=>{e=t.nmd(e);const r=t(58611),s=t(87016);t(79896),t(16928);const o=process.env.OAUTH_PORT||12345;process.env.OAUTH_PORT=o.toString();const a="\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Google Drive Authorization</title>\n  <style>\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100vh;\n      margin: 0;\n      background: #f5f6fa;\n    }\n    .container {\n      text-align: center;\n      padding: 40px;\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 4px 24px rgba(0,0,0,0.1);\n    }\n    .success {\n      color: #10b981;\n    }\n    .error {\n      color: #ef4444;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div id=\"message\">Processing authorization...</div>\n  </div>\n\n  <script>\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const error = urlParams.get('error');\n    const messageElement = document.getElementById('message');\n    \n    // Function to send message to opener\n    function sendMessageToOpener(type, data) {\n      if (window.opener) {\n        try {\n          window.opener.postMessage({ type: type, ...data }, '*');\n        } catch (error) {\n          // Handle error silently\n        }\n        \n        // Also try to close the window after a short delay\n        setTimeout(() => {\n          try {\n            if (!window.closed) {\n              window.close();\n            }\n          } catch (error) {\n            // Handle error silently\n          }\n        }, 1000);\n      }\n    }\n    \n    if (error) {\n      messageElement.textContent = 'Authorization failed: ' + error;\n      messageElement.className = 'error';\n      sendMessageToOpener('GOOGLE_AUTH_ERROR', { error: error });\n    } else if (code) {\n      messageElement.textContent = 'Authorization successful! You can close this window.';\n      messageElement.className = 'success';\n      sendMessageToOpener('GOOGLE_AUTH_SUCCESS', { code: code });\n    } else {\n      messageElement.textContent = 'Invalid authorization response';\n      messageElement.className = 'error';\n      sendMessageToOpener('GOOGLE_AUTH_ERROR', { error: 'Invalid authorization response' });\n    }\n  <\/script>\n</body>\n</html>\n",i=r.createServer((e,n)=>{if("/callback"===s.parse(e.url,!0).pathname){if(n.setHeader("Access-Control-Allow-Origin","*"),n.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS"),n.setHeader("Access-Control-Allow-Headers","Content-Type"),"OPTIONS"===e.method)return n.writeHead(200),void n.end();n.writeHead(200,{"Content-Type":"text/html"}),n.end(a)}else n.writeHead(404),n.end("Not Found")});let c=!1;function l(){return new Promise((e,n)=>{c?e(o):(i.listen(o,()=>{c=!0,e(o)}),i.on("error",t=>{if("EADDRINUSE"===t.code){const n=Math.floor(55536*Math.random())+1e4;i.listen(n,()=>{c=!0,e(n)})}else n(t)}))})}function d(){return new Promise(e=>{c?i.close(()=>{c=!1,e()}):e()})}t.c[t.s]===e&&(l().catch(console.error),process.on("SIGINT",()=>{d().then(()=>process.exit(0))}),process.on("SIGTERM",()=>{d().then(()=>process.exit(0))})),e.exports={server:i,port:o,callbackHTML:a,startOAuthServer:l,stopOAuthServer:d,getPort:()=>o}},58611:e=>{"use strict";e.exports=require("http")},79896:e=>{"use strict";e.exports=require("fs")},87016:e=>{"use strict";e.exports=require("url")}},n={};function t(r){var s=n[r];if(void 0!==s)return s.exports;var o=n[r]={id:r,loaded:!1,exports:{}};return e[r](o,o.exports,t),o.loaded=!0,o.exports}t.c=n,t.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);t(t.s=45528)})();