(()=>{var e={16:e=>{"use strict";e.exports=require("url")},288:e=>{"use strict";e.exports=require("otplib")},451:e=>{const t=e=>Buffer.from(e,"base64").toString();e.exports={getClientId:()=>t("OTIwMzQ4MjkwMjYyLTUxNWkya2t1cDVqZ3AwNzVmdmRpdjhhaXNlZjc4ZHE2LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t"),getClientSecret:()=>t("R09DU1BYLXlaNVZNRXRzcjh3WEp5RjlsY1Zfa0NCVFBWVGY="),getRedirectUri:()=>`http://localhost:${process.env.OAUTH_PORT||1e4}/callback`}},482:e=>{"use strict";e.exports=require("electron")},528:(e,t,s)=>{const n=s(611),r=s(16);s(896),s(928);const o=process.env.OAUTH_PORT||Math.floor(55536*Math.random())+1e4;process.env.OAUTH_PORT=o.toString();const a=n.createServer((e,t)=>{if("/callback"===r.parse(e.url,!0).pathname){if(t.setHeader("Access-Control-Allow-Origin","*"),t.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS"),t.setHeader("Access-Control-Allow-Headers","Content-Type"),"OPTIONS"===e.method)return t.writeHead(200),void t.end();t.writeHead(200,{"Content-Type":"text/html"}),t.end("\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Google Drive Authorization</title>\n  <style>\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 100vh;\n      margin: 0;\n      background: #f5f6fa;\n    }\n    .container {\n      text-align: center;\n      padding: 40px;\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 4px 24px rgba(0,0,0,0.1);\n    }\n    .success {\n      color: #10b981;\n    }\n    .error {\n      color: #ef4444;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div id=\"message\">Processing authorization...</div>\n  </div>\n\n  <script>\n    // Parse URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const error = urlParams.get('error');\n    \n    const messageElement = document.getElementById('message');\n    \n    if (error) {\n      messageElement.textContent = 'Authorization failed: ' + error;\n      messageElement.className = 'error';\n      \n      // Send error message to parent window\n      if (window.opener) {\n        window.opener.postMessage({\n          type: 'GOOGLE_AUTH_ERROR',\n          error: error\n        }, '*');\n      }\n    } else if (code) {\n      messageElement.textContent = 'Authorization successful! You can close this window.';\n      messageElement.className = 'success';\n      \n      // Send success message to parent window\n      if (window.opener) {\n        window.opener.postMessage({\n          type: 'GOOGLE_AUTH_SUCCESS',\n          code: code\n        }, '*');\n      }\n    } else {\n      messageElement.textContent = 'Invalid authorization response';\n      messageElement.className = 'error';\n    }\n    \n    // Close window after 2 seconds\n    setTimeout(() => {\n      window.close();\n    }, 2000);\n  <\/script>\n</body>\n</html>\n")}else t.writeHead(404),t.end("Not Found")});a.listen(o,()=>{e.exports.port=o}),process.on("SIGINT",()=>{a.close(()=>{process.exit(0)})}),e.exports=a},611:e=>{"use strict";e.exports=require("http")},722:e=>{"use strict";e.exports=require("electron-store")},850:e=>{"use strict";e.exports=require("googleapis")},896:e=>{"use strict";e.exports=require("fs")},928:e=>{"use strict";e.exports=require("path")}},t={};function s(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,s),o.exports}const{contextBridge:n}=s(482),{authenticator:r}=s(288),{google:o}=s(850),a=s(722);let i=null;try{i=s(528)}catch(e){}const c=new a,l=s(451),d=process.env.OAUTH_PORT||1e4,u=new o.auth.OAuth2(l.getClientId(),l.getClientSecret(),`http://localhost:${d}/callback`),p=o.drive({version:"v3",auth:u});n.exposeInMainWorld("plugin",{getplatformName:()=>process.platform,generateTotp:e=>{try{const t=(e||"").replace(/\s+/g,"").toUpperCase();return t?r.generate(t):""}catch(e){return""}},googleDrive:{getAuthUrl:()=>u.generateAuthUrl({access_type:"offline",scope:["https://www.googleapis.com/auth/drive.file"],prompt:"consent"}),getTokensFromCode:async e=>{try{const{tokens:t}=await u.getToken(e);return c.set("googleTokens",t),u.setCredentials(t),{success:!0,tokens:t}}catch(e){return{success:!1,error:e.message}}},isAuthenticated:()=>{const e=c.get("googleTokens");return!(!e||!e.access_token)&&(u.setCredentials(e),!0)},refreshToken:async()=>{try{const e=c.get("googleTokens");if(e&&e.refresh_token){u.setCredentials(e);const{credentials:t}=await u.refreshAccessToken();return c.set("googleTokens",t),u.setCredentials(t),{success:!0}}return{success:!1,error:"No refresh token available"}}catch(e){return{success:!1,error:e.message}}},uploadToDrive:async(e,t="passwords.enc")=>{try{if(!u.credentials.access_token){if(!(await n.exposeInMainWorld("plugin").googleDrive.refreshToken()).success)throw new Error("Authentication required")}const s=await p.files.list({q:`name='${t}' and trashed=false`,fields:"files(id,name)"}),r={name:t,mimeType:"application/json"},o={mimeType:"application/json",body:JSON.stringify(e)};let a;if(s.data.files.length>0)a=s.data.files[0].id,await p.files.update({fileId:a,media:o});else{a=(await p.files.create({resource:r,media:o})).data.id}return{success:!0,fileId:a}}catch(e){return{success:!1,error:e.message}}},downloadFromDrive:async(e="passwords.enc")=>{try{if(!u.credentials.access_token){if(!(await n.exposeInMainWorld("plugin").googleDrive.refreshToken()).success)throw new Error("Authentication required")}const t=await p.files.list({q:`name='${e}' and trashed=false`,fields:"files(id,name)"});if(0===t.data.files.length)return{success:!1,error:"File not found"};const s=t.data.files[0].id;return{success:!0,data:(await p.files.get({fileId:s,alt:"media"})).data}}catch(e){return{success:!1,error:e.message}}},deleteFromDrive:async(e="passwords.enc")=>{try{if(!u.credentials.access_token){if(!(await n.exposeInMainWorld("plugin").googleDrive.refreshToken()).success)throw new Error("Authentication required")}const t=await p.files.list({q:`name='${e}' and trashed=false`,fields:"files(id,name)"});if(0===t.data.files.length)return{success:!1,error:"File not found"};const s=t.data.files[0].id;return await p.files.delete({fileId:s}),{success:!0}}catch(e){return{success:!1,error:e.message}}},logout:()=>{c.delete("googleTokens"),u.credentials={}}}})})();