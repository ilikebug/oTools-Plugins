window.passwordManager=new class{constructor(){this.DB_NAME="password_db",this.PASSWORDS_KEY="passwords",this.MASTER_PASSWORD_KEY="master_password_hash",this.SALT_KEY="salt",this.passwordList=[],this.currentEditId=null,this.searchKeyword="",this.isAuthenticated=!1,this.masterPassword=null,this.init()}async init(){await this.checkMasterPassword()?this.showMasterPasswordDialog():this.showSetupMasterPasswordDialog()}async checkMasterPassword(){const t=await window.otools.getDbValue(this.DB_NAME,this.MASTER_PASSWORD_KEY);return t&&t.success&&t.value}showSetupMasterPasswordDialog(){const t=document.createElement("div");t.className="master-password-dialog",t.innerHTML='\n      <div class="dialog-content">\n        <h3>Set Master Password</h3>\n        <p>This is your first time using the password manager. Please set a master password to protect all your passwords.</p>\n        <div class="form-group">\n          <label for="masterPassword">Master Password</label>\n          <input type="password" id="masterPassword" placeholder="Enter master password...">\n        </div>\n        <div class="form-group">\n          <label for="confirmMasterPassword">Confirm Master Password</label>\n          <input type="password" id="confirmMasterPassword" placeholder="Enter master password again...">\n        </div>\n        <div class="dialog-buttons">\n          <button class="btn-primary" id="setupMasterPassword">Set Master Password</button>\n        </div>\n      </div>\n    ',document.body.appendChild(t),document.getElementById("setupMasterPassword").addEventListener("click",()=>{this.setupMasterPassword()}),t.querySelectorAll("input").forEach(t=>{t.addEventListener("keydown",t=>{"Enter"===t.key&&this.setupMasterPassword()})})}removeExistingDialogs(t){document.querySelectorAll(t).forEach(t=>t.remove())}showMasterPasswordDialog(){this.removeExistingDialogs(".master-password-dialog");const t=document.createElement("div");t.className="master-password-dialog",t.innerHTML='\n      <div class="dialog-content">\n        <h3>Enter Master Password</h3>\n        <p>Please enter your master password to unlock the password manager.</p>\n        <div class="form-group">\n          <label for="masterPassword">Master Password</label>\n          <input type="password" id="masterPassword" placeholder="Enter master password...">\n        </div>\n        <div class="dialog-buttons">\n          <button class="btn-primary" id="unlockMasterPassword">Unlock</button>\n        </div>\n      </div>\n    ',document.body.appendChild(t),document.getElementById("unlockMasterPassword").addEventListener("click",()=>{this.unlockMasterPassword()});const e=t.querySelector("input");e.addEventListener("keydown",t=>{"Enter"===t.key&&this.unlockMasterPassword()}),e.focus()}async setupMasterPassword(){const t=document.getElementById("masterPassword").value,e=document.getElementById("confirmMasterPassword").value;if(!t||t.length<6)this.showNotification("Master password must be at least 6 characters","error");else if(t===e)try{const e=this.generateSalt(),s=await this.hashPassword(t,e);await window.otools.setDbValue(this.DB_NAME,this.MASTER_PASSWORD_KEY,s),await window.otools.setDbValue(this.DB_NAME,this.SALT_KEY,e),this.removeExistingDialogs(".master-password-dialog"),this.masterPassword=t,this.isAuthenticated=!0,this.initializeAfterAuth(),this.showNotification("Master password set successfully!","success")}catch(t){this.showNotification("Failed to set master password","error")}else this.showNotification("Passwords do not match","error")}showChangeMasterPasswordDialog(){this.removeExistingDialogs(".change-master-password-dialog");const t=document.createElement("div");t.className="change-master-password-dialog",t.innerHTML='\n      <div class="dialog-content">\n        <h3>Change Master Password</h3>\n        <p>Please enter your current master password and set a new one.</p>\n        <div class="form-group">\n          <label for="currentMasterPassword">Current Master Password</label>\n          <input type="password" id="currentMasterPassword" placeholder="Enter current master password...">\n        </div>\n        <div class="form-group">\n          <label for="newMasterPassword">New Master Password</label>\n          <input type="password" id="newMasterPassword" placeholder="Enter new master password...">\n        </div>\n        <div class="form-group">\n          <label for="confirmNewMasterPassword">Confirm New Master Password</label>\n          <input type="password" id="confirmNewMasterPassword" placeholder="Enter new master password again...">\n        </div>\n        <div class="dialog-buttons">\n          <button class="btn-secondary" id="cancelChangeMasterPassword">Cancel</button>\n          <button class="btn-primary" id="confirmChangeMasterPassword">Change Master Password</button>\n        </div>\n      </div>\n    ',document.body.appendChild(t),document.getElementById("confirmChangeMasterPassword").addEventListener("click",()=>{this.changeMasterPassword()}),document.getElementById("cancelChangeMasterPassword").addEventListener("click",()=>{this.removeExistingDialogs(".change-master-password-dialog")}),t.querySelectorAll("input").forEach(t=>{t.addEventListener("keydown",t=>{"Enter"===t.key&&this.changeMasterPassword()})}),t.querySelector("#currentMasterPassword").focus()}async changeMasterPassword(){const t=document.getElementById("currentMasterPassword").value,e=document.getElementById("newMasterPassword").value,s=document.getElementById("confirmNewMasterPassword").value;if(t&&e&&s)if(e.length<6)this.showNotification("New master password must be at least 6 characters","error");else if(e===s)try{const s=await window.otools.getDbValue(this.DB_NAME,this.MASTER_PASSWORD_KEY),o=await window.otools.getDbValue(this.DB_NAME,this.SALT_KEY);if(!s.success||!o.success)return void this.showNotification("Current password verification failed","error");const i=s.value,a=o.value;if(await this.hashPassword(t,a)!==i)return this.showNotification("Current master password is incorrect","error"),void(document.getElementById("currentMasterPassword").value="");this.showNotification("Changing master password and re-encrypting all passwords...","info");const n=this.generateSalt(),r=await this.hashPassword(e,n),d=await this.getEncryptedPasswords(),l=await Promise.all(d.map(async t=>await this.encryptData(t,e)));if(await window.otools.setDbValue(this.DB_NAME,this.MASTER_PASSWORD_KEY,r),await window.otools.setDbValue(this.DB_NAME,this.SALT_KEY,n),await window.otools.setDbValue(this.DB_NAME,this.PASSWORDS_KEY,l),this.masterPassword=e,this.passwordList=d,this.renderPasswordList(),window.plugin.googleDrive&&window.plugin.googleDrive.isAuthenticated())try{await this.syncToCloud(),this.showNotification("Master password changed and synced to cloud successfully!","success")}catch(t){this.showNotification("Master password changed successfully, but cloud sync failed. Please sync manually later.","warning")}else this.showNotification("Master password changed successfully!","success");this.removeExistingDialogs(".change-master-password-dialog")}catch(t){this.showNotification("Failed to change master password: "+t.message,"error")}else this.showNotification("New passwords do not match","error");else this.showNotification("Please fill in all fields","error")}async unlockMasterPassword(){const t=document.getElementById("masterPassword").value;if(t)try{const e=await window.otools.getDbValue(this.DB_NAME,this.MASTER_PASSWORD_KEY),s=await window.otools.getDbValue(this.DB_NAME,this.SALT_KEY);if(!e.success||!s.success)return void this.showNotification("Master password verification failed","error");const o=e.value,i=s.value;await this.hashPassword(t,i)===o?(this.removeExistingDialogs(".master-password-dialog"),this.masterPassword=t,this.isAuthenticated=!0,this.initializeAfterAuth(),this.showNotification("Unlocked successfully!","success")):(this.showNotification("Incorrect master password","error"),document.getElementById("masterPassword").value="")}catch(t){this.showNotification("Verification failed","error")}else this.showNotification("Please enter master password","info")}async initializeAfterAuth(){this.passwordList=await this.getEncryptedPasswords(),this.renderPasswordList(),this.bindEvents(),await this.initCloudSync(),setInterval(()=>{this.saveEncryptedPasswords()},5e3)}generateSalt(){const t=new Uint8Array(32);return crypto.getRandomValues(t),Array.from(t,t=>t.toString(16).padStart(2,"0")).join("")}async hashPassword(t,e){const s=(new TextEncoder).encode(t+e),o=await crypto.subtle.digest("SHA-256",s);return Array.from(new Uint8Array(o)).map(t=>t.toString(16).padStart(2,"0")).join("")}async encryptData(t,e){const s=new TextEncoder,o=await crypto.subtle.importKey("raw",s.encode(e),{name:"PBKDF2"},!1,["deriveBits","deriveKey"]),i=crypto.getRandomValues(new Uint8Array(16)),a=await crypto.subtle.deriveKey({name:"PBKDF2",salt:i,iterations:1e5,hash:"SHA-256"},o,{name:"AES-GCM",length:256},!0,["encrypt"]),n=crypto.getRandomValues(new Uint8Array(12)),r=s.encode(JSON.stringify(t)),d=await crypto.subtle.encrypt({name:"AES-GCM",iv:n},a,r);return{encrypted:Array.from(new Uint8Array(d)),iv:Array.from(n),salt:Array.from(i)}}async decryptData(t,e){try{if(!t||!e)return null;let s=t;if("string"==typeof s)try{s=JSON.parse(s)}catch(t){return null}if(!s.encrypted||!s.iv||!s.salt)return null;const o=Array.isArray(s.encrypted)?new Uint8Array(s.encrypted):s.encrypted,i=Array.isArray(s.iv)?new Uint8Array(s.iv):s.iv,a=Array.isArray(s.salt)?new Uint8Array(s.salt):s.salt,n=new TextEncoder,r=await crypto.subtle.importKey("raw",n.encode(e),{name:"PBKDF2"},!1,["deriveBits","deriveKey"]),d=await crypto.subtle.deriveKey({name:"PBKDF2",salt:a,iterations:1e5,hash:"SHA-256"},r,{name:"AES-GCM",length:256},!0,["decrypt"]),l=await crypto.subtle.decrypt({name:"AES-GCM",iv:i},d,o),c=(new TextDecoder).decode(l);if(!c||""===c.trim())return null;try{return JSON.parse(c)}catch(t){return null}}catch(t){return null}}bindEvents(){const t=document.querySelector(".top-bar input");t&&t.addEventListener("input",t=>{this.isAuthenticated&&(this.searchKeyword=t.target.value.trim().toLowerCase(),this.renderPasswordList())});const e=document.querySelector(".add-btn");e&&e.addEventListener("click",()=>{this.isAuthenticated?this.showAddModal():this.showNotification("Please unlock the password manager first","info")});const s=document.getElementById("changeMasterPassword");s&&s.addEventListener("click",()=>{this.isAuthenticated?this.showChangeMasterPasswordDialog():this.showNotification("Please unlock the password manager first","info")});const o=document.getElementById("closeWindow");o&&o.addEventListener("click",()=>{this.closeWindow()});const i=document.getElementById("connectGoogle"),a=document.getElementById("syncToCloud"),n=document.getElementById("syncFromCloud"),r=document.getElementById("logoutGoogle");i&&i.addEventListener("click",()=>{this.isAuthenticated?this.showGoogleDriveLogin():this.showNotification("Please unlock the password manager first","info")}),a&&a.addEventListener("click",async()=>{this.isAuthenticated?await this.syncToCloud():this.showNotification("Please unlock the password manager first","info")}),n&&n.addEventListener("click",async()=>{this.isAuthenticated?await this.syncFromCloudWithMerge():this.showNotification("Please unlock the password manager first","info")}),r&&r.addEventListener("click",()=>{this.logoutFromGoogleDrive()}),this.bindModalEvents(),this.bindKeyboardNavigation()}bindModalEvents(){const t=document.getElementById("passwordModal"),e=document.getElementById("closeModal"),s=document.getElementById("cancelBtn"),o=document.getElementById("saveBtn"),i=document.getElementById("togglePassword"),a=document.getElementById("generatePassword");e&&e.addEventListener("click",()=>{this.hideModal()}),s&&s.addEventListener("click",()=>{this.hideModal()}),o&&o.addEventListener("click",async()=>{await this.savePassword()}),i&&i.addEventListener("click",()=>{this.togglePasswordVisibility()}),a&&a.addEventListener("click",()=>{const t=this.generateStrongPassword();document.getElementById("password").value=t,this.showNotification("Password generated!","success")}),t&&t.addEventListener("click",e=>{e.target===t&&this.hideModal()}),t.querySelectorAll("input, textarea").forEach(t=>{t.addEventListener("keydown",async t=>{"Enter"===t.key&&"textarea"!==t.target.type&&(t.preventDefault(),await this.savePassword())})})}generateStrongPassword(t=16,e=!0,s=!0,o=!0,i=!0){const a="abcdefghijklmnopqrstuvwxyz";let n="";e&&(n+="ABCDEFGHIJKLMNOPQRSTUVWXYZ"),s&&(n+=a),o&&(n+="0123456789"),i&&(n+="!@#$%^&*()-_=+[]{}|;:,.<>?"),n||(n=a);let r="";for(let e=0;e<t;e++)r+=n[Math.floor(Math.random()*n.length)];return r}bindKeyboardNavigation(){document.addEventListener("keydown",t=>{if((t.ctrlKey||t.metaKey)&&"w"===t.key)return t.preventDefault(),void this.closeWindow();if(document.getElementById("passwordModal").classList.contains("show"))return;if(!this.isAuthenticated)return;const e=document.querySelectorAll(".password-item"),s=document.querySelector(".password-item.selected");let o=Array.from(e).indexOf(s);switch(t.key){case"ArrowDown":t.preventDefault(),o=Math.min(o+1,e.length-1),this.selectPasswordItem(o);break;case"ArrowUp":t.preventDefault(),o=Math.max(o-1,0),this.selectPasswordItem(o);break;case"Enter":if(s){t.preventDefault();const e=s.getAttribute("data-id");this.copyPassword(e)}break;case"n":if(t.ctrlKey||t.metaKey){if(t.preventDefault(),!this.isAuthenticated)return void this.showNotification("Please unlock the password manager first","info");this.showAddModal()}}})}selectPasswordItem(t){const e=document.querySelectorAll(".password-item");e.forEach((e,s)=>{e.classList.toggle("selected",s===t)}),e[t]&&e[t].scrollIntoView({block:"nearest"})}renderPasswordList(){const t=document.querySelector(".main-content");if(!t)return;if(!this.isAuthenticated)return void(t.innerHTML='<div class="empty">Please unlock the password manager first</div>');let e=this.passwordList;if(this.searchKeyword&&(e=this.passwordList.filter(t=>t.title.toLowerCase().includes(this.searchKeyword)||t.username.toLowerCase().includes(this.searchKeyword)||t.url&&t.url.toLowerCase().includes(this.searchKeyword)||t.notes&&t.notes.toLowerCase().includes(this.searchKeyword))),0===e.length){const e=this.searchKeyword?"No passwords found":"No passwords yet. Click + to add one.";return void(t.innerHTML=`<div class="empty">${e}</div>`)}const s=e.map(t=>{const e=t.id;let s="";return t.totpSecret&&(s=`<div class="totp-section"><span class="totp-code" id="totp-code-${e}">${this.getTotpCode(t.totpSecret)}</span><span class="totp-timer" id="totp-timer-${e}">${this.getTotpRemaining()}s</span></div>`),`\n        <div class="password-item" data-id="${e}">\n          <div class="password-info">\n            <div class="password-title">${this.escapeHtml(t.title)}</div>\n            <div class="password-username">${this.escapeHtml(t.username)}</div>\n            ${s}\n          </div>\n          <div class="password-actions">\n            <button class="action-btn copy-btn" title="Copy Password" data-id="${e}">\n              <svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n                <path d="M8 3H5a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2h-3M8 3H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2V5a2 2 0 00-2-2h-2" stroke="#2563eb" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n              </svg>\n            </button>\n            <button class="action-btn edit-btn" title="Edit" data-id="${e}">\n              <svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n                <path d="M11 4H4a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-7" stroke="#2563eb" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n                <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z" stroke="#2563eb" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n              </svg>\n            </button>\n            <button class="action-btn delete-btn" title="Delete" data-id="${e}">\n              <svg viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\n                <path d="M3 6h14M8 6V4a2 2 0 012-2h0a2 2 0 012 2v2m3 0v10a2 2 0 01-2 2H7a2 2 0 01-2-2V6h12z" stroke="#ef4444" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n              </svg>\n            </button>\n          </div>\n        </div>\n      `}).join("");t.innerHTML=`<div class="password-list">${s}</div>`,this.bindPasswordItemEvents(),e.some(t=>t.totpSecret)&&this.startTotpTimer(e)}bindPasswordItemEvents(){const t=document.querySelectorAll(".password-item"),e=document.querySelectorAll(".copy-btn"),s=document.querySelectorAll(".edit-btn"),o=document.querySelectorAll(".delete-btn");t.forEach(t=>{t.addEventListener("click",e=>{if(!e.target.closest(".action-btn")){const e=t.getAttribute("data-id");this.copyPassword(e)}})}),e.forEach(t=>{t.addEventListener("click",e=>{e.stopPropagation();const s=t.getAttribute("data-id");this.copyPassword(s)})}),s.forEach(t=>{t.addEventListener("click",e=>{e.stopPropagation();const s=t.getAttribute("data-id");this.showEditModal(s)})}),o.forEach(t=>{t.addEventListener("click",e=>{e.stopPropagation();const s=t.getAttribute("data-id");this.deletePassword(s)})})}showAddModal(){this.isAuthenticated?(this.currentEditId=null,this.clearModalForm(),document.getElementById("modalTitle").textContent="Add New Password",document.getElementById("passwordModal").classList.add("show"),document.getElementById("title").focus()):this.showNotification("Please unlock the password manager first","info")}showEditModal(t){if(!this.isAuthenticated)return void this.showNotification("Please unlock the password manager first","info");const e=this.passwordList.find(e=>e.id===t);e&&(this.currentEditId=t,this.fillModalForm(e),document.getElementById("modalTitle").textContent="Edit Password",document.getElementById("passwordModal").classList.add("show"),document.getElementById("title").focus())}hideModal(){document.getElementById("passwordModal").classList.remove("show"),this.currentEditId=null}clearModalForm(){document.getElementById("title").value="",document.getElementById("username").value="",document.getElementById("password").value="",document.getElementById("url").value="",document.getElementById("notes").value="",document.getElementById("totpSecret").value=""}fillModalForm(t){document.getElementById("title").value=t.title||"",document.getElementById("username").value=t.username||"",document.getElementById("password").value=t.password||"",document.getElementById("url").value=t.url||"",document.getElementById("notes").value=t.notes||"",document.getElementById("totpSecret").value=t.totpSecret||""}async savePassword(){if(!this.isAuthenticated)return void this.showNotification("Please unlock the password manager first","info");const t=document.getElementById("title").value.trim(),e=document.getElementById("username").value.trim(),s=document.getElementById("password").value.trim(),o=document.getElementById("url").value.trim(),i=document.getElementById("notes").value.trim(),a=document.getElementById("totpSecret").value.trim();if(a){if(!t)return void this.showNotification("Please fill in title","info")}else if(!t||!e||!s)return void this.showNotification("Please fill in title, username and password","info");const n={title:t,username:e,password:s,url:o,notes:i,totpSecret:a,createdAt:(new Date).toISOString()};if(this.currentEditId){const t=this.passwordList.findIndex(t=>t.id===this.currentEditId);-1!==t&&(n.id=this.currentEditId,n.createdAt=this.passwordList[t].createdAt,n.updatedAt=(new Date).toISOString(),this.passwordList[t]=n)}else n.id=this.generateId(),this.passwordList.unshift(n);this.renderPasswordList(),this.hideModal(),this.showNotification("Password saved successfully!","success"),window.plugin.googleDrive.isAuthenticated()&&await this.syncToCloud()}async copyPassword(t){if(!this.isAuthenticated)return void this.showNotification("Please unlock the password manager first","info");const e=this.passwordList.find(e=>e.id===t);if(e)try{let t,s;if(e.totpSecret){const o=this.getTotpCode(e.totpSecret);if(!o||"Invalid"===o||"N/A"===o)return void this.showNotification("Invalid TOTP secret","error");t=o,s="TOTP code copied to clipboard!"}else t=e.password,s="Password copied to clipboard!";await window.otools.writeClipboard(t),this.showNotification(s,"success")}catch(t){this.showNotification("Failed to copy to clipboard","error")}}async deletePassword(t){this.isAuthenticated?confirm("Are you sure you want to delete this password?")&&(this.passwordList=this.passwordList.filter(e=>e.id!==t),this.renderPasswordList(),this.showNotification("Password deleted successfully!","success"),window.plugin.googleDrive.isAuthenticated()&&await this.syncToCloud()):this.showNotification("Please unlock the password manager first","info")}togglePasswordVisibility(){const t=document.getElementById("password"),e=(document.getElementById("togglePassword"),document.getElementById("togglePasswordIcon"));"password"===t.type?(t.type="text",e.innerHTML='<path d="M17.94 17.94A10.07 10.07 0 0120 12c0-5.52-4.48-10-10-10S0 6.48 0 12c0 1.76.46 3.4 1.26 4.82L17.94 17.94z"/><path d="M1 1l22 22"/>'):(t.type="password",e.innerHTML='<path d="M1 12s4-7 11-7 11 7 11 7-4 7-11 7S1 12 1 12z"/><circle cx="12" cy="12" r="3"/>')}showNotification(t,e="success"){this.removeExistingDialogs(".copy-success");const s=document.createElement("div");let o;switch(s.className="copy-success",e){case"success":default:o="var(--success-color)";break;case"error":o="var(--danger-color)";break;case"info":o="var(--info-color)";break;case"warning":o="var(--warning-color)"}s.style.background=o,s.textContent=t,document.body.appendChild(s),setTimeout(()=>{s.parentNode&&s.parentNode.removeChild(s)},3e3)}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2)}escapeHtml(t){return t?t.replace(/[&<>"']/g,function(t){return{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"}[t]||t}):""}async getPasswords(){const t=await window.otools.getDbValue(this.DB_NAME,this.PASSWORDS_KEY);return t&&t.success&&t.value?t.value:[]}async savePasswords(){await window.otools.setDbValue(this.DB_NAME,this.PASSWORDS_KEY,this.passwordList)}async getEncryptedPasswords(){const t=await window.otools.getDbValue(this.DB_NAME,this.PASSWORDS_KEY);return t&&t.success&&t.value?await Promise.all(t.value.map(async t=>await this.decryptData(t,this.masterPassword))):[]}async saveEncryptedPasswords(){const t=await Promise.all(this.passwordList.map(async t=>await this.encryptData(t,this.masterPassword)));await window.otools.setDbValue(this.DB_NAME,this.PASSWORDS_KEY,t)}getTotpCode(t){try{return window.plugin&&"function"==typeof window.plugin.generateTotp?window.plugin.generateTotp(t)||"Invalid":"N/A"}catch(t){return"Invalid"}}getTotpRemaining(){return 30-Math.floor(Date.now()/1e3)%30}startTotpTimer(t){this._totpInterval&&clearInterval(this._totpInterval),this._totpInterval=setInterval(()=>{t.forEach(t=>{if(t.totpSecret){const e=document.getElementById(`totp-code-${t.id}`),s=document.getElementById(`totp-timer-${t.id}`);e&&(e.textContent=this.getTotpCode(t.totpSecret)),s&&(s.textContent=this.getTotpRemaining()+"s")}})},1e3)}async initCloudSync(){window.plugin.googleDrive.isAuthenticated()&&(await this.syncFromCloudWithMerge()||this.showCloudSyncRecoveryDialog()),this.updateSyncStatus()}showCloudSyncRecoveryDialog(){const t=document.createElement("div");t.className="modal show",t.innerHTML='\n      <div class="modal-content">\n        <div class="modal-header">\n          <h3>Cloud Sync Issue Detected</h3>\n          <button class="close-btn" onclick="this.closest(\'.modal\').remove()">\n            <svg viewBox="0 0 20 20" fill="none" width="20" height="20" xmlns="http://www.w3.org/2000/svg">\n              <path d="M15 5L5 15M5 5l10 10" stroke="#666" stroke-width="2" stroke-linecap="round"/>\n            </svg>\n          </button>\n        </div>\n        <div class="modal-body">\n          <p>Failed to sync from Google Drive. This could be due to:</p>\n          <ul>\n            <li>Master password mismatch</li>\n            <li>Corrupted cloud data</li>\n            <li>Network connectivity issues</li>\n          </ul>\n          <p>Your local passwords are safe and encrypted.</p>\n          <p><strong>Note:</strong> Your local passwords will be preserved and merged with cloud data when possible.</p>\n        </div>\n        <div class="modal-footer">\n          <button class="btn-secondary" onclick="window.passwordManager.resetCloudSync()">Reset Cloud Sync</button>\n          <button class="btn-secondary" onclick="window.passwordManager.disconnectFromCloud()">Disconnect</button>\n          <button class="btn-primary" onclick="window.passwordManager.retryCloudSync()">Retry</button>\n        </div>\n      </div>\n    ',document.body.appendChild(t)}async resetCloudSync(){try{this.removeExistingDialogs(".modal.show"),this.showNotification("Resetting cloud sync...","info"),await window.plugin.googleDrive.deleteFromDrive(),await this.syncToCloud()?this.showNotification("Cloud sync reset successfully!","success"):this.showNotification("Failed to reset cloud sync","error")}catch(t){this.showNotification("Failed to reset cloud sync: "+t.message,"error")}}async disconnectFromCloud(){this.removeExistingDialogs(".modal.show"),window.plugin.googleDrive.logout(),this.updateSyncStatus(),this.showNotification("Disconnected from Google Drive. Your local passwords are safe.","info")}async retryCloudSync(){this.removeExistingDialogs(".modal.show"),await this.syncFromCloudWithMerge()||setTimeout(()=>{this.showCloudSyncRecoveryDialog()},1e3)}showGoogleDriveLogin(){const t=document.createElement("div");t.className="google-drive-dialog",t.innerHTML='\n      <div class="dialog-content">\n        <h3>Connect to Google Drive</h3>\n        <p>Connect your Google Drive account to enable cloud sync for your passwords.</p>\n        <div class="login-container">\n          <button class="btn-primary" id="googleLoginBtn">\n            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">\n              <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>\n              <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>\n              <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>\n              <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>\n            </svg>\n            Sign in with Google\n          </button>\n        </div>\n        <div class="dialog-buttons">\n          <button class="btn-secondary" id="cancelGoogleLogin">Cancel</button>\n        </div>\n      </div>\n    ',document.body.appendChild(t),document.getElementById("googleLoginBtn").addEventListener("click",()=>{this.handleGoogleLogin()}),document.getElementById("cancelGoogleLogin").addEventListener("click",()=>{this.removeExistingDialogs(".google-drive-dialog")})}async handleGoogleLogin(){try{await window.plugin.googleDrive.getOAuthPort();const t=await window.plugin.googleDrive.getAuthUrl(),e=window.open(t,"googleAuth","width=500,height=600"),s=async t=>{if(t.origin.startsWith("http://localhost:")||"null"===t.origin)if("GOOGLE_AUTH_SUCCESS"===t.data.type){const{code:i}=t.data;o&&(clearTimeout(o),o=null),window.removeEventListener("message",s);const a=await window.plugin.googleDrive.getTokensFromCode(i);if(a.success){try{e&&!e.closed&&e.close()}catch(t){}this.removeExistingDialogs(".google-drive-dialog"),await this.syncToCloud(),this.showNotification("Successfully connected to Google Drive!","success"),this.updateSyncStatus()}else this.showNotification("Failed to connect to Google Drive: "+a.error,"error")}else"GOOGLE_AUTH_ERROR"===t.data.type&&(o&&(clearTimeout(o),o=null),window.removeEventListener("message",s),this.showNotification("Google Drive authorization failed: "+t.data.error,"error"))};window.addEventListener("message",s);let o=setTimeout(()=>{try{e&&e.closed&&(window.removeEventListener("message",s),this.showNotification("Google Drive login popup was closed. Please try again.","error"))}catch(t){window.removeEventListener("message",s),this.showNotification("Google Drive login popup was closed. Please try again.","error")}},3e4)}catch(t){this.showNotification("Failed to start Google Drive login: "+t.message,"error")}}async syncToCloud(){try{const t=await window.otools.getDbValue(this.DB_NAME,this.PASSWORDS_KEY);if(!t||!t.success||!t.value)return this.showNotification("No passwords to sync","info"),!1;if(Array.isArray(t.value)&&0===t.value.length)return this.showNotification("No passwords to sync","info"),!1;const e={version:"1.0",timestamp:Date.now(),data:t.value},s=await window.plugin.googleDrive.uploadToDrive(e);return s.success?(this.showNotification("Successfully synced to Google Drive!","info"),this.updateSyncStatus(),!0):(this.showNotification("Failed to sync to Google Drive: "+s.error,"error"),!1)}catch(t){return this.showNotification("Sync failed: "+t.message,"error"),!1}}async syncFromCloudWithMerge(){try{const t=await window.plugin.googleDrive.downloadFromDrive();if(t.success){let e=t.data;if(e instanceof Blob&&(e=await e.text()),"string"==typeof e)try{e=JSON.parse(e)}catch(t){return this.showNotification("Invalid cloud data format. Please reset cloud sync.","error"),!1}let s=[];if(e&&Array.isArray(e.data))s=e.data;else{if(!Array.isArray(e))return this.showNotification("Invalid cloud data format. Please reset cloud sync.","error"),!1;s=e}const o=[];let i=0;for(let t=0;t<s.length;t++){const e=s[t];let a=null;try{if(!(e&&"object"==typeof e&&e.encrypted&&e.iv&&e.salt)){i++;continue}a=await this.decryptData(e,this.masterPassword),a?o.push(a):i++}catch(t){i++;continue}}if(0===o.length)return this.showNotification("Failed to decrypt any passwords from cloud. The master password may be incorrect or the data is corrupted.","error"),!1;i>0?this.showNotification(`Some cloud data failed to parse. Successfully imported ${o.length} items.`,"info"):this.showNotification(`Successfully imported ${o.length} passwords from cloud.`,"info");const a=this.mergePasswordsLocalFirst(o);return this.passwordList=a,await this.savePasswords(),this.renderPasswordList(),this.updateSyncStatus(),!0}return this.showNotification("Failed to sync from cloud: "+t.error,"error"),!1}catch(t){return this.showNotification("Sync failed: "+t.message,"error"),!1}}mergePasswordsLocalFirst(t){const e=[...this.passwordList],s=[...e],o=new Map;e.forEach(t=>{o.set(t.id,t)}),t.forEach(t=>{o.get(t.id)||s.push(t)});const i=t.filter(t=>!o.has(t.id)).length;return i>0&&this.showNotification(`Added ${i} new passwords from cloud`,"info"),s}updateSyncStatus(){const t=window.plugin.googleDrive.isAuthenticated(),e=document.getElementById("syncStatus"),s=document.getElementById("connectGoogle"),o=document.getElementById("syncToCloud"),i=document.getElementById("syncFromCloud"),a=document.getElementById("logoutGoogle");e&&(t?(e.innerHTML='\n          <span class="sync-status connected">\n            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">\n              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>\n            </svg>\n            Connected to Google Drive\n          </span>\n        ',s&&(s.style.display="none"),o&&(o.style.display="flex"),i&&(i.style.display="flex"),a&&(a.style.display="flex")):(e.innerHTML='\n          <span class="sync-status disconnected">\n            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">\n              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>\n            </svg>\n            Not connected to Google Drive\n          </span>\n        ',s&&(s.style.display="flex"),o&&(o.style.display="none"),i&&(i.style.display="none"),a&&(a.style.display="none")))}logoutFromGoogleDrive(){window.plugin.googleDrive.logout(),this.updateSyncStatus(),this.showNotification("Disconnected from Google Drive","info")}closeWindow(){this.hasUnsavedChanges()?confirm("You have unsaved changes. Are you sure you want to close?")&&this.performClose():this.performClose()}hasUnsavedChanges(){const t=document.getElementById("passwordModal");if(t&&t.classList.contains("show")){const t=document.getElementById("title").value,e=document.getElementById("username").value,s=document.getElementById("password").value,o=document.getElementById("url").value,i=document.getElementById("notes").value,a=document.getElementById("totpSecret").value;return t||e||s||o||i||a}return!1}performClose(){this.saveEncryptedPasswords(),this.showNotification("Closing Password Manager...","info"),setTimeout(()=>{window.otools&&window.otools.closeWindow?window.otools.closeWindow():window.close()},1e3)}};